apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildkit
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    This Task builds source into a container image using Moby BuildKit. This task is adapted from tekton-catalog to output
    build metadata and to use an updated default buildkit image.
  params:
  - name: DOCKERFILE
    description: The name of the Dockerfile
    default: "Dockerfile"
  - name: BUILDKIT_CLIENT_IMAGE
    description: The name of the BuildKit client (buildctl) image
    # The image needs to be rootful because Tekton creates /builder/home/.docker/config.json owned by root:root with 0600
    # https://github.com/tektoncd/pipeline/issues/852
    default: moby/buildkit:v0.10.6@sha256:77abd86c9422aaff294bfde1029f03a6ab18ece0105003637cfda1d7fc22299f
  - name: BUILDKIT_DAEMON_ADDRESS
    description: The address of the BuildKit daemon (buildkitd) service
    default: "tcp://buildkitd:1234"
  - name: BUILDKIT_CLIENT_CERTS
    description: The name of Secret that contains ca.pem, cert.pem, key.pem for mTLS connection to BuildKit daemon
    default: "buildkit-client-certs"
  - name: IMAGE
    description: The image tag to build and push
  - name: TOOLS_IMAGE
    description: Image used for jq
    default: greenlightcoop/node-utils:0.1.28@sha256:8d89e9c6b445581374b26e7bc31443e62cf0960e2f0c22ada49238bdd6bb2317
  workspaces:
  - name: source
  results:
  - name: metadata
    description: location to write metadata output to
  - name: digest
    description: location to write image digest to
  volumes:
  - name: certs
    secret:
      secretName: $(params.BUILDKIT_CLIENT_CERTS)
  steps:
  - name: build-and-push
    image: $(params.BUILDKIT_CLIENT_IMAGE)
    workingDir: $(workspaces.source.path)
    volumeMounts:
    - name: certs
      readOnly: true
      mountPath: /certs
    script: |
      #!/bin/sh
      set -ex

      buildctl --debug \
              --addr=$(params.BUILDKIT_DAEMON_ADDRESS) \
              --tlscacert /certs/ca.pem \
              --tlscert /certs/cert.pem \
              --tlskey /certs/key.pem \
              build \
              --progress=plain \
              --frontend=dockerfile.v0 \
              --opt filename=$(params.DOCKERFILE) \
              --local context=. --local dockerfile=. \
              --output type=image,name=$(params.IMAGE),push=true \
              --export-cache type=inline \
              --import-cache type=registry,ref=$(params.IMAGE) \
              --metadata-file $(results.metadata.path)
  - name: get-digest
    image: $(params.TOOLS_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      #!/usr/bin/env bash
      set -ex

      jq -r '.["containerimage.descriptor"].digest' $(results.metadata.path) | tr -d "\n" > $(results.digest.path)