apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildkit
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    This Task builds source into a container image using Moby BuildKit. This task is adapted from tekton-catalog to output
    build metadata and to use an updated default buildkit image.
  params:
  - name: DOCKERFILE
    description: The name of the Dockerfile
    default: "Dockerfile"
  - name: BUILDKIT_CLIENT_IMAGE
    description: The name of the BuildKit client (buildctl) image
    # The image needs to be rootful because Tekton creates /builder/home/.docker/config.json owned by root:root with 0600
    # https://github.com/tektoncd/pipeline/issues/852
    default: moby/buildkit:v0.10.2@sha256:3fbc9b9d9a74ab650eea43610ed880e51cdc05282d61f83c2e0a3b2e9ed3a344
  - name: BUILDKIT_DAEMON_ADDRESS
    description: The address of the BuildKit daemon (buildkitd) service
    default: "tcp://buildkitd:1234"
  - name: BUILDKIT_CLIENT_CERTS
    description: The name of Secret that contains ca.pem, cert.pem, key.pem for mTLS connection to BuildKit daemon
    default: "buildkit-client-certs"
  - name: IMAGE
    description: The image tag to build and push
  - name: TOOLS_IMAGE
    description: Image used for jq
    default: greenlightcoop/node-utils:0.1.20@sha256:f808007519871240ba6ffc587c8a86b8c657b24c843b6ec9fa99784b86b61236
  workspaces:
  - name: source
  results:
  - name: output
    description: location to write metadata output to
  volumes:
  - name: certs
    secret:
      secretName: $(params.BUILDKIT_CLIENT_CERTS)
  steps:
  - name: build-and-push
    image: $(params.BUILDKIT_CLIENT_IMAGE)
    workingDir: $(workspaces.source.path)
    volumeMounts:
    - name: certs
      readOnly: true
      mountPath: /certs
    command: ["buildctl", "--debug",
              "--addr=$(params.BUILDKIT_DAEMON_ADDRESS)",
              "--tlscacert", "/certs/ca.pem",
              "--tlscert", "/certs/cert.pem",
              "--tlskey", "/certs/key.pem",
              "build",
              "--progress=plain",
              "--frontend=dockerfile.v0",
              "--opt", "filename=$(params.DOCKERFILE)",
              "--local", "context=.", "--local", "dockerfile=.",
              "--output", "type=image,name=$(params.IMAGE),push=true",
              "--export-cache", "type=inline",
              "--import-cache", "type=registry,ref=$(params.IMAGE)",
              "--metadata-file=$(results.output.path)/metadata.json"]
  - name: get-digest
    image: $(params.TOOLS_IMAGE)
    workingDir: $(results.output.path)
    script: |
      #!/usr/bin/env bash
      set -ex

      jq -r '.["containerimage.descriptor"].digest' metadata.json | tr -d "\n" > digest