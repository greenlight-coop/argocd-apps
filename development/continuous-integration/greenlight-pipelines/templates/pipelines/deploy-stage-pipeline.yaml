apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: deploy-stage-pipeline
  namespace: greenlight-pipelines
spec:
  params:
    - name: project-name
      type: string
    - name: repository-full-name
      type: string
    - name: git-revision
      type: string
  workspaces:
    - name: git-source
    - name: status-workspace
    - name: node-modules
    - name: kubeconfig-dir
    - name: manifest-dir
  tasks:
    - name: set-default-outcome
      taskRef:
        name: set-outcome-status
      params:
        - name: status
          value: failure
      workspaces:
        - name: status-workspace
          workspace: status-workspace
    - name: publish-pending-status-to-github
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: STATE
          value: pending
        - name: DESCRIPTION
          value: Build started
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
    - name: clone-git-repo
      taskRef:
        name: git-clone
      params:
        - name: url
          value: git@github.com:$(params.repository-full-name).git
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: git-source
    - name: parse-templates
      taskRef:
        name: parse-templates
      runAfter:
        - clone-git-repo
      params:
        - name: values
          value: |
            domainName: {{ .Values.domainName }}
      workspaces:
        - name: template-directory
          workspace: git-source
    - name: deploy-stage
      taskRef:
        name: apply-manifest
      runAfter:
        - clone-git-repo
        - parse-templates
      params:
        - name: manifest-path
          value: $(params.project-name).yaml
      workspaces:
        - name: source
          workspace: git-source
    - name: wait-for-stage-ready
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            sleep 5
            for ksvc in `kubectl -n $(params.project-name) get services.serving.knative.dev -o jsonpath='{.items[*].metadata.name}'`
            do 
              kubectl wait -n $(params.project-name) --for=condition=Ready --timeout=60s ksvc/$ksvc
            done
      runAfter:
        - deploy-stage
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
        - name: manifest-dir
          workspace: manifest-dir
    - name: set-success-outcome
      taskRef:
        name: set-outcome-status
      runAfter:
        - deploy-stage
        - wait-for-stage-ready
      params:
        - name: status
          value: success
      workspaces:
        - name: status-workspace
          workspace: status-workspace
  finally:
    - name: publish-outcome-status-to-github
      taskRef:
        name: github-set-status-from-outcome
      workspaces:
        - name: status-workspace
          workspace: status-workspace
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: DESCRIPTION
          value: Build complete
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
