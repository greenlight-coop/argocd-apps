apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-pipeline-node-package
  namespace: greenlight-pipelines
spec:
  params:
    - name: project-name
      type: string
    - name: repository-full-name
      type: string
    - name: hub-organization
      type: string
    - name: build-type
      type: string
    - name: git-revision
      type: string
    - name: git-branch
      type: string
    - name: git-pr-number
      type: string
    - name: git-pr-commit-number
      type: string
    - name: preview-namespace
      type: string
  workspaces:
    - name: git-source
    - name: status-workspace
    - name: node-modules
    - name: kubeconfig-dir
    - name: manifest-dir
  tasks:
    - name: set-default-outcome
      taskRef:
        name: set-outcome-status
      params:
        - name: status
          value: failure
      workspaces:
        - name: status-workspace
          workspace: status-workspace
    - name: publish-pending-status-to-github
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: STATE
          value: pending
        - name: DESCRIPTION
          value: Build started
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
    - name: clone-git-repo
      taskRef:
        name: git-clone
      params:
        - name: url
          value: git@github.com:$(params.repository-full-name).git
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: git-source
    - name: build-node-package
      when:
        - input: $(params.build-type)
          operator: in
          values: ["node-package"]
      taskRef:
        name: build-node-package
      runAfter:
        - clone-git-repo
      workspaces:
        - name: source
          workspace: git-source
    - name: snyk-test
      taskRef:
        name: snyk-test
      runAfter:
        - build-node-package
      params:
        - name: image
          value: $(params.hub-organization)/$(params.project-name):$(tasks.generate-image-tag.results.image-tag)
      workspaces:
        - name: source
          workspace: git-source
    - name: set-success-outcome
      taskRef:
        name: set-outcome-status
      runAfter:
        - set-default-outcome
        - snyk-test
      params:
        - name: status
          value: success
      workspaces:
        - name: status-workspace
          workspace: status-workspace
  finally:
    - name: publish-outcome-status-to-github
      taskRef:
        name: github-set-status-from-outcome
      workspaces:
        - name: status-workspace
          workspace: status-workspace
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: DESCRIPTION
          value: Build complete
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
