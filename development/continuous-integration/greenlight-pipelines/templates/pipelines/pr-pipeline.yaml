apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-pipeline
  namespace: greenlight-pipelines
spec:
  params:
    - name: project-name
      type: string
    - name: repository-full-name
      type: string
    - name: hub-organization
      type: string
    - name: build-type
      type: string
    - name: git-revision
      type: string
    - name: git-branch
      type: string
    - name: git-pr-number
      type: string
    - name: git-pr-commit-number
      type: string
    - name: preview-namespace
      type: string
  workspaces:
    - name: git-source
    - name: status-workspace
    - name: node-modules
    - name: kubeconfig-dir
    - name: manifest-dir
  tasks:
    - name: set-default-outcome
      taskRef:
        name: set-outcome-status
      params:
        - name: status
          value: failure
      workspaces:
        - name: status-workspace
          workspace: status-workspace
    - name: publish-pending-status-to-github
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: STATE
          value: pending
        - name: DESCRIPTION
          value: Build started
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
    - name: ensure-preview-namespace-exists
      when:
        - input: $(params.build-type)
          operator: in
          values: ["service"]
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Namespace
            metadata:
              name: $(params.preview-namespace)
              labels:
                istio-injection: enabled
            EOF
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
        - name: manifest-dir
          workspace: manifest-dir    
    - name: generate-image-tag
      taskRef:
        name: generate-image-tag
      params:
        - name: organization
          value: $(params.hub-organization)
        - name: repository
          value: $(params.project-name)
        - name: branch-name
          value: $(params.git-branch)
        - name: pull-request-number
          value: $(params.git-pr-number)
        - name: pull-request-commit-number
          value: $(params.git-pr-commit-number)
      workspaces:
        - name: node-modules
          workspace: node-modules
    - name: clone-git-repo
      taskRef:
        name: git-clone
      params:
        - name: url
          value: git@github.com:$(params.repository-full-name).git
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: git-source
    - name: build-and-push-image
      taskRef:
        name: buildkit
      runAfter:
        - clone-git-repo
      params:
        - name: IMAGE
          value: $(params.hub-organization)/$(params.project-name):$(tasks.generate-image-tag.results.image-tag)
        - name: BUILDKIT_CLIENT_IMAGE
          value: moby/buildkit:v0.9.3@sha256:d6c89b7085b106301645ddcc77cf64eb7b705ab507b72d52d130ac33f1300417
      workspaces:
        - name: source
          workspace: git-source
    - name: snyk-test
      taskRef:
        name: snyk-test
      runAfter:
        - build-and-push-image
      params:
        - name: image
          value: $(params.hub-organization)/$(params.project-name):$(tasks.generate-image-tag.results.image-tag)
      workspaces:
        - name: source
          workspace: git-source
    - name: deploy-preview-application
      when:
        - input: $(params.build-type)
          operator: in
          values: ["service"]
      taskRef:
        name: deploy-preview-application
      runAfter:
        - snyk-test
        - ensure-preview-namespace-exists
      params:
        - name: project-name
          value: $(params.project-name)
        - name: namespace
          value: $(params.preview-namespace)
        - name: git-revision
          value: $(params.git-revision)
        - name: image-version
          value: $(tasks.generate-image-tag.results.image-tag)
      workspaces:
        - name: source
          workspace: git-source
    - name: run-integration-tests
      when:
        - input: $(params.build-type)
          operator: in
          values: ["service"]
      taskRef:
        name: run-serenity-tests
      runAfter:
        - deploy-preview-application
      params:
        - name: base-url
          value: http://$(params.project-name).$(params.preview-namespace).svc.cluster.local
        - name: results-identifier
          value: $(params.preview-namespace)
      workspaces:
        - name: source
          workspace: git-source
    - name: set-success-outcome-service
      when:
        - input: $(params.build-type)
          operator: in
          values: ["service"]
      taskRef:
        name: set-outcome-status
      runAfter:
        - set-default-outcome
        - run-integration-tests
      params:
        - name: status
          value: success
      workspaces:
        - name: status-workspace
          workspace: status-workspace
    - name: set-success-outcome-nonservice
      when:
        - input: $(params.build-type)
          operator: notin
          values: ["service"]
      taskRef:
        name: set-outcome-status
      runAfter:
        - set-default-outcome
        - snyk-test
      params:
        - name: status
          value: success
      workspaces:
        - name: status-workspace
          workspace: status-workspace
  finally:
    - name: publish-outcome-status-to-github
      taskRef:
        name: github-set-status-from-outcome
      workspaces:
        - name: status-workspace
          workspace: status-workspace
      params:
        - name: REPO_FULL_NAME
          value: $(params.repository-full-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: DESCRIPTION
          value: Build complete
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.domainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
