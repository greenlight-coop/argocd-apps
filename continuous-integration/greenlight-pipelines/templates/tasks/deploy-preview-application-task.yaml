apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-preview-application
spec:
  description: >-
    Deploys a preview version of a service for isolated integration testing. Based on tekton-catalog kuberenetes-actions
    task. Expects a Kustomize application in the source subdirctory "preview".
  params:
    - name: project-name
      description: The project name for the application to install (should match GitHub repo and Docker image name)
      type: string
    - name: namespace
      description: The namespace to install the preview into
      type: string
    - name: git-revision
      description: The current git-revision, used to access the preview Helm chart
      type: string
    - name: image-version
      description: Version of the Docker image to deploy
      type: string
    - name: kubectl-image
      default: gcr.io/cloud-builders/kubectl@sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753 #image is huge
      description: Kubectl wrapper image
  workspaces:
    - name: source
  steps:
    - name: deploy-preview-application
      workingDir: $(workspaces.source.path)
      image: $(params.kubectl-image)
      script: |
        #!/usr/bin/env bash
        set -xe

        export IMAGE_TAG=$(params.image-version)
        cp -r preview preview-parsed
        for file in `find preview-parsed -type f`
        do 
          echo $file
          cat $file | envsubst | tee $file
          echo
        done

        kubectl apply -n $(params.namespace) -k preview-parsed

        metadata_generation="metadata_generation unknown"
        observed_generation="observed_generation unknown"
        status="unknown"
        until [ "$metadata_generation" = "$observed_generation" ] && [ "$status" = "True" ]
        do
            echo "Waiting for service deployment to complete..."
            sleep 1
            read -r metadata_generation observed_generation status <<<$(kubectl -n $(params.namespace) get configurations.serving.knative.dev $(params.project-name) -o="jsonpath={.metadata.generation} {.status.observedGeneration} {.status.conditions[0].status}")
            echo "    metadata_generation=$metadata_generation"
            echo "    observed_generation=$observed_generation"
            echo "    status=$status"
        done

        echo -e "\nService is available." 