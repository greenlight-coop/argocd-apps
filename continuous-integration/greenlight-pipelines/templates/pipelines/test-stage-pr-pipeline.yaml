apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-stage-pr-pipeline
  namespace: greenlight-pipelines
spec:
  params:
    - name: project-name
    - name: git-revision
  workspaces:
    - name: git-source
    - name: status-workspace
    - name: node-modules
    - name: kubeconfig-dir
    - name: manifest-dir
  tasks:
    - name: set-default-outcome
      taskRef:
        name: set-outcome-status
      params:
        - name: status
          value: failure
      workspaces:
        - name: status-workspace
          workspace: status-workspace
    - name: publish-pending-status-to-github
      taskRef:
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: greenlight-coop/$(params.project-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: STATE
          value: pending
        - name: DESCRIPTION
          value: Build started
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.appsDomainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
    - name: clone-git-repo
      taskRef:
        name: git-clone
      params:
        - name: url
          value: git@github.com:greenlight-coop/$(params.project-name).git
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: git-source
    - name: deploy-test-stage
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Namespace
            metadata:
              name: $(params.preview-namespace)
            EOF
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
        - name: manifest-dir
          workspace: manifest-dir    
    - name: deploy-test-stage
      taskRef:
        name: apply-manifest
      runAfter:
        - clone-git-repo
      params:
        - name: manifest-path
          value: $(params.project-name).yaml
    # - name: run-functional-tests
    #   taskRef:
    #     name: node-run-functional-tests
    #   runAfter:
    #     - deploy-test-stage
    #   params:
    #     - name: service-name
    #       value: $(params.project-name)
    #     - name: namespace
    #       value: $(params.preview-namespace)
    #   workspaces:
    #     - name: source
    #       workspace: git-source
    - name: set-success-outcome
      taskRef:
        name: set-outcome-status
      runAfter:
        - run-functional-tests
      params:
        - name: status
          value: success
      workspaces:
        - name: status-workspace
          workspace: status-workspace
  finally:
    - name: publish-outcome-status-to-github
      taskRef:
        name: github-set-status-from-outcome
      workspaces:
        - name: status-workspace
          workspace: status-workspace
      params:
        - name: REPO_FULL_NAME
          value: greenlight-coop/$(params.project-name)
        - name: SHA
          value: $(params.git-revision)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: bot-github-token
        - name: GITHUB_TOKEN_SECRET_KEY
          value: botGithubTokenValue
        - name: DESCRIPTION
          value: Build complete
        - name: TARGET_URL
          value: https://dashboard.{{ .Values.appsDomainName }}/#/namespaces/greenlight-pipelines/pipelineruns/$(context.pipelineRun.name)
