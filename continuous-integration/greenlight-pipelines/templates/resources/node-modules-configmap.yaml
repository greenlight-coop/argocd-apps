apiVersion: v1
kind: ConfigMap
metadata:
  name: node-modules
  namespace: greenlight-pipelines
data:
  docker-functions.js: |
    const axios = require('axios')

    function getHubAPI (config) {
      const { dockerHubDomain, organization, repository, username, password } = config
      let token
      async function getToken () {
        if (!token) {
          const config = {
            headers: {'Content-Type': 'application/json'}
          }
          const data = {
            username: username,
            password: password
          }
          const url = `https://${dockerHubDomain}/v2/users/login/`
          console.log('Making authentication request to %s', url)
          const response = await axios.post(url, data, config)
          token = response.data.token
        }
        return token
      }

      async function getTags () {
        const tags = []
        const config = {
          headers: {
            'Authorization': 'JWT ' + await getToken(),
            'Content-Type': 'application/json'
          }
        }
        let url = `https://${dockerHubDomain}/v2/repositories/${organization}/${repository}/tags`
        let response
        do {
          if (response) {
            url = response.data.next
          }
          response = await axios.get(url, config)
          tags.push(...response.data.results)
        } while (response.data.next)
        return tags.map(tag => tag.name)
      }

      async function deleteTag (tag) {
        let url = `https://${dockerHubDomain}/v2/repositories/${organization}/${repository}/tags/${tag}`
        const config = {
          headers: {
            'Authorization': 'JWT ' + await getToken()
          }
        }
        console.log('Deleting tag at %s', url)
        await axios.delete(url, config)
      }

      async function getReleaseTags () {
        return filterReleaseTags(await getTags())
      }
      
      async function getPullRequestTags (pullRequestNumber) {
        return filterPullRequestTags(await getTags(), pullRequestNumber)
      }

      return {
        getToken,
        getTags,
        deleteTag,
        getReleaseTags,
        getPullRequestTags
      }
    }

    function getRegistryAPI (config) {
      const { authDomain, authService, apiDomain, organization, repository, username, password } = config
      const authScope = `repository:${organization}/${repository}:pull`
      const authOfflineToken = '1'
      const authClientId = 'greenlight-pipelines'
      let token
      async function getToken () {
        if (!token)  {
          const config = {
            headers: {
              Accept: 'application/vnd.docker.distribution.manifest.v2+json'
            },
            auth: {
              username: username,
              password: password
            }
          }
          const url = `https://${authDomain}/token?service=${authService}&scope=${authScope}&offline_token=${authOfflineToken}&client_id=${authClientId}`
          console.log('Making authentication request to %s', url)
          const response = await axios.get(url, config)
          token = response.data.token
        }
        return token
      }
      
      async function getTags () {
        const config = {
          headers: {
            'Authorization': 'Bearer ' + await getToken()
          }
        }
        let url = `https://${apiDomain}/v2/${organization}/${repository}/tags/list`
        console.log('Retrieving tags from %s', url)
        const response = await axios.get(url, config)
        return response.data.tags
      }

      async function getManifest (reference) {
        const config = {
          headers: {
            'Authorization': 'Bearer ' + await getToken(),
            'Accept': 'application/vnd.docker.distribution.manifest.v2+json'
          }
        }
        let url = `https://${apiDomain}/v2/${organization}/${repository}/manifests/${reference}`
        console.log('Retrieving manifest from %s', url)
        const response = await axios.get(url, config)
        return {
          digest: response.headers['docker-content-digest'],
          data: response.data
        }
      }

      async function getReleaseTags () {
        return filterReleaseTags(await getTags())
      }
      
      async function getPullRequestTags (pullRequestNumber) {
        return filterPullRequestTags(await getTags(), pullRequestNumber)
      }
      
      return {
        getToken,
        getTags,
        getManifest,
        getReleaseTags,
        getPullRequestTags,
        getSemanticVersion
      }
    }

    function filterReleaseTags (tags) {
      const releaseTags = tags.filter(tag => isReleaseVersionTag(tag))
      releaseTags.sort((tag1, tag2) => getSemanticVersion(tag1).compare(getSemanticVersion(tag2)))
      return releaseTags
    }

    function filterPullRequestTags (tags, pullRequestNumber) {
      return tags.filter(tag => isPullRequestVersionTag(tag, pullRequestNumber))
    }

    function isReleaseVersionTag (tag) {
      const versionRegex = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      return versionRegex.test(tag)
    }

    function isPullRequestVersionTag (tag, pullRequestNumber) {
      const versionRegex = new RegExp('^(0|[1-9]\d*)\\.(0|[1-9]\d*)\\.(0|[1-9]\\d*)-([a-z]|[0-9]|-)*-pr-' + pullRequestNumber + '-([a-z]|[0-9]|-)*$')
      return versionRegex.test(tag)
    }

    function getSemanticVersion(tag) {
      const parts = tag.split('.')
      return {
        major: parseInt(parts[0]),
        minor: parseInt(parts[1]),
        patch: parseInt(parts[2]),
        compare: function (otherVersion) {
          if (this.major != otherVersion.major) {
            return this.major - otherVersion.major
          } else if (this.minor != otherVersion.minor) {
            return this.minor - otherVersion.minor
          } else {
            return this.patch - otherVersion.patch
          } 
        },
        toString: function () {
          return this.major + '.' + this.minor + '.' + this.patch
        }
      }
    }

    module.exports = {
      getRegistryAPI,
      getHubAPI,
      getSemanticVersion
    }